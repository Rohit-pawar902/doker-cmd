Git Branches and Tag
Git tags and branches are two key Git concepts that allow developers to work on different versions of a project simultaneously.
Both play an important role in organizing development work so that changes are easier to track and manage,
but they serve different purposes in the development process. 

-  Tags are used as markers for significant points in the project timeline, 
-  whereas branches are separate lines of development that will eventually be merged back into the main application code.

Many development teams that use Git frequently make use of both Git branches and Git tags. Branches allow you to code features or fix bugs without impacting the main code branch, whereas tags are essential for marking a point in time in your code, such as a new release of your application.

Branches and tags work together to optimize your workflow. With CircleCI, they can also add flexibility and functionality to your CI/CD process. You can use them to orchestrate and streamline builds, tests, and deployments and to monitor the performance of high priority builds.

To learn more about how you can use effective branching and tagging strategies alongside best-in-class CI/CD to streamline your software delivery, get started with your free CircleCI account today.


Tags are of 2 Types:
Lightweight
annotated

Tags are just marker that points the old state of a project, and on somewhat kind we felt that we were going wrong 
we can go to that tag(because at that state everything is good).Book -merker-did'nt understand go back
History of commits/changes traversal has been easier.


1. git config credential.helper store: It will cache the credential so next time you don't have to enter.
2. git config --global user.password "TOKEN"
3. git remote -v
4. git remote add origin1 ""
5. git push origin1
 
6. git reset --soft head^
7. git restore --staged
8. git stash pop
9. git stash push - path/file
10. git reset --hard head^

11. git stash list : Show the files in the most recent stash:
12. git stash show: Show the changes of the most recent stash:
13. git stash show -p
14. git stash show -p stash@{1} : Show the changes of the named stash:
15. git stash show -p 1  : Or in short

16. git stash drop            # drop top hash, stash@{0}
17. git stash drop stash@{n}
18. git stash clear
